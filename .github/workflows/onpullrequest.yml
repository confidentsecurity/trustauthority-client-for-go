name: OnPullRequest

on:
  pull_request:

jobs:
  version-check:
    runs-on: [ ubuntu-20.04 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: version-check
        run: |
          /bin/bash version-check.sh
          if [[ $? -eq 1 ]]; then
            echo "version check failed"
            exit 1
          fi
  build-test-scan:
    runs-on: [ ubuntu-20.04 ]
    needs: [ "version-check" ]
    env:
      http_proxy: ${{ secrets.HTTP_PROXY }}
      https_proxy: ${{ secrets.HTTPS_PROXY }}
      no_proxy: ${{ secrets.NO_PROXY }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.0'


      - name: Style Checker
        run: |
          gofmt -l .
          if [[ $(gofmt -l . | wc -l) -gt 0 ]]; then
             echo "Atleast 1 file need formatting"
             exit 1
          fi

      - name: Unit Test Coverage
        run: |
          test_output=$(cd tdx-cli && make test)
          if [ $? -ne 0 ]; then
            echo "Unit tests failed for tdx-cli"
            exit 1
          fi
          COVERAGE=$(cd tdx-cli && make test-coverage | grep 'total' | awk '{print $3}' | awk -F. '{print $1}')
          echo "Unit test coverage for tdx-cli is - $COVERAGE%"
          if [[ $COVERAGE -lt 80 ]]; then
            echo "Unit test coverage must be above 80%"
            exit 1
          fi
          test_output=$(cd go-connector && go test ./... -coverprofile=cover.out)
          if [ $? -ne 0 ]; then
            echo "Unit tests failed for go-connector"
            exit 1
          fi
          COVERAGE=$(echo \"$test_output\" | awk '{print $5}' | awk -F. '{print $1}')
          echo "Unit test coverage for go-connector is - $COVERAGE%"
          if [[ $COVERAGE -lt 80 ]]; then
            echo "Unit test coverage must be above 80%"
            exit 1
          fi

  checkmarx:
    runs-on: [ self-hosted ]
    container:
      image: amr-registry.caas.intel.com/amber/checkmarx:isecl
      credentials:
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}
    env:
      HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
      HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
      NO_PROXY: ${{ secrets.NO_PROXY }}
      PROJECT: ${{ secrets.CHECKMARX_PROJECT }}
      TEAM: ${{ secrets.CHECKMARX_TEAM }}
      CHECKMARX_BASE_URL: ${{ secrets.CHECKMARX_URL }}
      CHECKMARX_USERNAME: ${{ secrets.CHECKMARX_USERNAME }}
      CHECKMARX_PASSWORD: ${{ secrets.CHECKMARX_PASSWORD }}
      CHECKMARX_CLIENT_SECRET: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
      CX_FLOW_BREAK_BUILD: false
      CX_FLOW_ENABLED_VULNERABILITY_SCANNERS: sast
      CX_FLOW_BUG_TRACKER: Sarif
      CHECKMARX_SCAN_PRESET: IntelDefault
      CXFLOW_PARAMS: "--namespace=${{ github.repository_owner }} --repo-name=${{ github.event.repository.name }} --branch=${{ github.ref }} --cx-flow.filterSeverity --cx-flow.filterCategory"

    steps:
      - name: Checkmarx CxFlow Action
        uses: actions/checkout@v2

      - name: Checkmarx CxFlow run
        run: |
          echo "Project - ${PROJECT}"
          echo "scanner ${CX_FLOW_ENABLED_VULNERABILITY_SCANNERS}"
          java ${JAVA_OPTS} -jar /app/cx-flow.jar --spring.profiles.active="${CX_FLOW_ENABLED_VULNERABILITY_SCANNERS}" --scan --github.api-url="${GITHUB_API_URL}/repos/" --cx-team="${TEAM}" --cx-project="${PROJECT}" --app="${APP}" --f=. ${CXFLOW_PARAMS}